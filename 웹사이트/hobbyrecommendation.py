from flask import Flask, request, render_template
import pandas as pd
import catboost as cb

app = Flask(__name__)

# Define the feature names and corresponding descriptions
features = [
    ('Q34_N', '나이'),
    ('Q11_1_1_N', '지난 1년간 하루 평균 평일 여가시간'),
    ('Q11_1_2_N', '지난 1년간 하루 평균 휴일 여가시간'),
    ('Q41_1', '경제활동 한 경우 직업 - 주업'),
    ('Q42_1', '지난 1년 간 세금 공제 전 월 평균 소득- 본인'),
    ('Q9_N', '지난 1년간 여가활동을 위한 지출액(월 평균)'),
    ('Q3', '여가활동 주 목적'),
    ('Q7', '지속적으로 참여하는 여가활동 중 가장 많이하는 여가 생활'),
    ('Q8_1_N', '지속적/반복적으로 참여하는 여가활동 - 참여기간(년)'),
    ('Q8_2_N', '지속적/반복적으로 참여하는 여가활동 - 참여기간(개월)'),
    ('Q12_1_N', '여가시간 중 스마트기기 이용 시간 - 평일'),
    ('Q12_2_N', '여가시간 중 스마트기기 이용 시간 - 휴일'),
    ('Q25', '일(학업)과 여가의 균형'),
    ('Q33', '혼인상태'),
    ('Q36_1_1', '동거 자녀 현황 (복수응답1) - 자녀 없음'),
    ('Q31_1', '여가활동 제약요인 - 시간부족'),
    ('Q31_2', '여가활동 제약요인 - 경제적 지출 부담'),
    ('Q2_1_1', '지난 1년간 가장 많이 참여한 여가활동 (1순위)'),
    ('Q2_1_2', '지난 1년간 가장 많이 참여한 여가활동 (2순위)'),
    ('Q2_1_3', '지난 1년간 가장 많이 참여한 여가활동 (3순위)'),
    ('Q4_1', '가장 만족스런 여가활동 (1순위)'),
    ('Q4_2', '가장 만족스런 여가활동 (2순위)'),
    ('Q4_3', '가장 만족스런 여가활동 (3순위)')
]

# Define the targets
targets = [
    'Q5_3_A', 'Q5_3_B', 'Q5_3_C', 'Q5_3_D',
    'Q5_3_E', 'Q5_3_F', 'Q5_3_G', 'Q5_3_H',
    'Q5_4_A', 'Q5_4_B', 'Q5_4_C', 'Q5_4_D',
    'Q5_4_E', 'Q5_4_F', 'Q5_4_G', 'Q5_4_H'
]

# Define human-readable options for certain features
options = {
    'Q41_1': [
        '1. 관리자', '2. 전문가 및 관련 종사자', '3. 사무 종사자', '4. 서비스 종사자', '5. 판매 종사자',
        '6. 농림어업 숙련 종사자', '7. 기능원 및 관련 기능 종사자', '8. 장치·기계 조작 및 조립 종사자',
        '9. 단순노무종사자', '10. 군인'
    ],
    'Q42_1': [
        '1. 소득없음', '2. 월 평균 100만원 미만', '3. 월 평균 100만원 ~ 200만원 미만', '4. 월 평균 200만원 ~ 300만원 미만',
        '5. 월 평균 300만원 ~ 400만원 미만', '6. 월 평균 400만원 ~ 500만원 미만', '7. 월 평균 500만원 ~ 600만원 미만',
        '8. 월 평균 600만원 ~ 700만원 미만', '9. 월 평균 700만원 ~ 800만원 미만', '10. 월 평균 800만원 ~ 900만원 미만',
        '11. 월 평균 900만원 ~ 1,000만원 미만', '12. 월 평균 1,000만원 이상', '99. 모름/무응답'
    ],
    'Q9_N': [
        '1. 매우 부족했다', '2', '3', '4. 보통이다', '5', '6', '7. 매우 충분했다', '9. 모름/무응답'
    ],
    'Q3': [
        '1. 건강을 위해', '2. 개인의 즐거움을 위해', '3. 마음의 안정과 휴식을 위해', '4. 대인 관계·교제를 위해', 
        '5. 스트레스 해소를 위해', '6. 자기 계발을 위해', '7. 자기만족을 위해', '8. 시간을 보내기 위해',
        '9. 가족과 시간을 함께하기 위해', '10. 기타', '99. 모름/무응답'
    ],
    'Q25': [
        '1. 일에 더 집중하고 있다', '2', '3', '4. 일과 여가의 균형을 이루고 있다', '5', '6', '7. 여가에 더 집중하고 있다', '9. 모름/무응답'
    ],
    'Q33': [
        '1. 미혼', '2. 배우자 있음', '3. 사별', '4. 이혼', '5. 기타', '9. 모름/무응답'
    ],
    'Q36_1_1': [
        '0. 비해당', '1. 해당'
    ],
    'Q31_1': [
        '1. 전혀 영향을 끼치지 않는다', '2', '3', '4. 보통이다', '5', '6', '7. 매우 영향을 끼친다', '9. 모름/무응답'
    ],
    'Q31_2': [
        '1. 전혀 영향을 끼치지 않는다', '2', '3', '4. 보통이다', '5', '6', '7. 매우 영향을 끼친다', '9. 모름/무응답'
    ]
}

activity_options = [
    '1. 전시회 관람(미술, 사진, 건축, 디자인 등)', '2. 박물관 관람', '3. 음악연주회 관람(클래식, 오페라 등)',
    '4. 전통예술공연 관람(국악, 민속놀이 등)', '5. 연극공연 관람(뮤지컬 포함)', '6. 무용공연 관람', '7. 영화관람',
    '8. 연예공연 관람(쇼, 콘서트, 마술 쇼 등)', '9. 문학행사참여', '10. 글짓기/독서토론', '11. 미술활동(그림, 서예, 조각, 디자인, 도예, 만화 등)',
    '12. 악기연주/노래교실', '13. 전통예술 배우기(사물놀이, 줄타기 등)', '14. 사진촬영(디지털카메라 포함)', '15. 춤/무용(발레, 한국무용, 현대무용, 방송댄스, 스트릿댄스, 비보잉 등)',
    '16. 스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)', '17. 스포츠 경기 간접관람- TV, DMB를 통한관람(축구, 야구, 농구, 배구 등)', '18. 격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)',
    '19. 온라인게임 경기관람(e-스포츠 경기 포함)', '20. 농구, 배구, 야구, 축구, 족구', '21. 테니스, 스쿼시', '22. 당구/포켓볼', '23. 볼링, 탁구', '24. 골프', '25. 수영',
    '26. 윈드서핑, 수상스키, 스킨스쿠버다이빙, 래프팅, 요트', '27. 스노보드, 스키 등', '28. 아이스스케이트, 아이스하키 등', '29. 헬스(PT,보디빌딩)/에어로빅/크로스핏', '30. 요가/필라테스/태보',
    '31. 배드민턴/줄넘기/맨손, 스트레칭 체조/훌라후프', '32. 러닝/조깅/마라톤', '33. 격투 스포츠(태권도, 유도, 합기도, 검도, 권투 등)', '34. 댄스스포츠(탱고, 왈츠, 자이브, 맘보,폴카, 차차차등)',
    '35. 사이클링/산악자전거', '36. 인라인스케이트', '37. 승마, 암벽등반, 철인삼종경기, 서바이벌', '38. 문화유적방문(고궁, 절, 유적지 등)', '39. 자연명승 및 풍경 관람', '40. 삼림욕',
    '41. 국내캠핑', '42. 해외여행', '43. 소풍/야유회', '44. 온천/해수욕', '45. 유람선 타기', '46. 테마파크가기/놀이공원/동물원/식물원 가기', '47. 지역축제 참가', '48. 자동차 드라이브',
    '49. 수집활동(스크랩 포함)', '50. 생활공예(십자수, 비즈공예, D.I.Y, 꽃꽂이 등)', '51. 요리하기/다도', '52. 반려동물 돌보기', '53. 노래방 가기', '54. 인테리어(집, 자동차 등)',
    '55. 등산', '56. 낚시', '57. 홈페이지/블로그 관리', '58. 인터넷 검색/1인 미디어 제작/SNS/영상편집', '59. 게임(온라인/모바일/콘솔게임 등)', '60. 보드게임/퍼즐/큐브 맞추기',
    '61. 바둑/장기/체스', '62. 겜블(경마, 경륜, 카지노, 카드놀이, 고스톱, 마작 등)/복권구입', '63. 쇼핑/외식', '64. 음주', '65. 독서(웹소설 포함)', '66. 만화보기(웹툰 포함)',
    '67. 미용(피부관리, 헤어관리, 네일아트, 마사지, 성형 등)', '68. 어학/기술/자격증 취득 공부/학원 등 이용', '69. 이색/테마카페 체험(방탈출, VR, 낚시카페 등)', '70. 원예(화분, 화단가꾸기 등)',
    '71. 산책 및 걷기', '72. 목욕/사우나/찜질방', '73. 낮잠', '74. TV시청(IPTV 포함)', '75. 모바일 컨텐츠, 동영상, VOD 시청, OTT 시청', '76. 라디오/팟캐스트 청취',
    '77. 음악 감상', '78. 신문/잡지보기', '79. 아무것도 안 하기', '80. 사회봉사활동', '81. 종교활동', '82. 클럽/나이트/디스코/캬바레 가기', '83. 가족 및 친지방문',
    '84. 잡담/통화하기/문자보내기(모바일 메신저 메시지 사용 포함)', '85. 계모임/동창회/사교(파티)모임', '86. 친구만남/이성교제/미팅/소개팅', '87. 동호회 모임',
    '88. 위에서 분류되지 않은 기타 여가활동', '89. 독서/만화책(웹툰)보기(2014,2016,2018)', '90. 이성교제(데이트)/미팅/소개팅(2014,2016,2018)', '91. 친구만남/동호회 모임(2014,2016,2018)',
    '99. 무응답'
]

activity_list = [
    (i + 1, option) for i, option in enumerate(activity_options)
]

# Load the trained models
models = {}
for target in targets:
    model = cb.CatBoostClassifier()
    model.load_model(f'{target}_model.cbm')
    models[target] = model

@app.route('/')
def home():
    return render_template('index.html', features=features, options=options, activity_options=activity_options, activity_list=activity_list)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Extract feature values from the form
        input_features = []
        for feature, _ in features:
            if feature in options or feature in activity_options:
                input_features.append(int(request.form[feature]))
            else:
                input_features.append(float(request.form[feature]))
        input_data = pd.DataFrame([input_features], columns=[f[0] for f in features])

        # Extract the name and gender (not used for prediction)
        second_name = request.form['second_name']

        # Make predictions using the models
        predictions = {}
        for target in targets:
            model = models[target]
            prediction = model.predict(input_data)[0]
            predictions[target] = int(prediction)
        
        # Convert prediction numbers to human-readable strings
        activity_mapping = {
            i + 1: option for i, option in enumerate(activity_options)
        }
        for key in predictions:
            predictions[key] = activity_mapping.get(predictions[key], "Unknown activity")

        return render_template('result.html', predictions=predictions, second_name=second_name)
    except ValueError as e:
        return str(e)

if __name__ == '__main__':
    app.run(debug=True)


